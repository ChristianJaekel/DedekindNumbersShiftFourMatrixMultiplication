#include "FDL.hpp"
#include <array>
#include <bitset>
#include <cmath>
#include <iostream>
#include <map>

const std::array<uint64_t, 64> generators = {
    0b0000000000000000000000000000000000000000000000000000000000000001,
    0b0000000000000000000000000000000000000000000000000000000000000011,
    0b0000000000000000000000000000000000000000000000000000000000000101,
    0b0000000000000000000000000000000000000000000000000000000000001111,
    0b0000000000000000000000000000000000000000000000000000000000010001,
    0b0000000000000000000000000000000000000000000000000000000000110011,
    0b0000000000000000000000000000000000000000000000000000000001010101,
    0b0000000000000000000000000000000000000000000000000000000011111111,
    0b0000000000000000000000000000000000000000000000000000000100000001,
    0b0000000000000000000000000000000000000000000000000000001100000011,
    0b0000000000000000000000000000000000000000000000000000010100000101,
    0b0000000000000000000000000000000000000000000000000000111100001111,
    0b0000000000000000000000000000000000000000000000000001000100010001,
    0b0000000000000000000000000000000000000000000000000011001100110011,
    0b0000000000000000000000000000000000000000000000000101010101010101,
    0b0000000000000000000000000000000000000000000000001111111111111111,
    0b0000000000000000000000000000000000000000000000010000000000000001,
    0b0000000000000000000000000000000000000000000000110000000000000011,
    0b0000000000000000000000000000000000000000000001010000000000000101,
    0b0000000000000000000000000000000000000000000011110000000000001111,
    0b0000000000000000000000000000000000000000000100010000000000010001,
    0b0000000000000000000000000000000000000000001100110000000000110011,
    0b0000000000000000000000000000000000000000010101010000000001010101,
    0b0000000000000000000000000000000000000000111111110000000011111111,
    0b0000000000000000000000000000000000000001000000010000000100000001,
    0b0000000000000000000000000000000000000011000000110000001100000011,
    0b0000000000000000000000000000000000000101000001010000010100000101,
    0b0000000000000000000000000000000000001111000011110000111100001111,
    0b0000000000000000000000000000000000010001000100010001000100010001,
    0b0000000000000000000000000000000000110011001100110011001100110011,
    0b0000000000000000000000000000000001010101010101010101010101010101,
    0b0000000000000000000000000000000011111111111111111111111111111111,
    0b0000000000000000000000000000000100000000000000000000000000000001,
    0b0000000000000000000000000000001100000000000000000000000000000011,
    0b0000000000000000000000000000010100000000000000000000000000000101,
    0b0000000000000000000000000000111100000000000000000000000000001111,
    0b0000000000000000000000000001000100000000000000000000000000010001,
    0b0000000000000000000000000011001100000000000000000000000000110011,
    0b0000000000000000000000000101010100000000000000000000000001010101,
    0b0000000000000000000000001111111100000000000000000000000011111111,
    0b0000000000000000000000010000000100000000000000000000000100000001,
    0b0000000000000000000000110000001100000000000000000000001100000011,
    0b0000000000000000000001010000010100000000000000000000010100000101,
    0b0000000000000000000011110000111100000000000000000000111100001111,
    0b0000000000000000000100010001000100000000000000000001000100010001,
    0b0000000000000000001100110011001100000000000000000011001100110011,
    0b0000000000000000010101010101010100000000000000000101010101010101,
    0b0000000000000000111111111111111100000000000000001111111111111111,
    0b0000000000000001000000000000000100000000000000010000000000000001,
    0b0000000000000011000000000000001100000000000000110000000000000011,
    0b0000000000000101000000000000010100000000000001010000000000000101,
    0b0000000000001111000000000000111100000000000011110000000000001111,
    0b0000000000010001000000000001000100000000000100010000000000010001,
    0b0000000000110011000000000011001100000000001100110000000000110011,
    0b0000000001010101000000000101010100000000010101010000000001010101,
    0b0000000011111111000000001111111100000000111111110000000011111111,
    0b0000000100000001000000010000000100000001000000010000000100000001,
    0b0000001100000011000000110000001100000011000000110000001100000011,
    0b0000010100000101000001010000010100000101000001010000010100000101,
    0b0000111100001111000011110000111100001111000011110000111100001111,
    0b0001000100010001000100010001000100010001000100010001000100010001,
    0b0011001100110011001100110011001100110011001100110011001100110011,
    0b0101010101010101010101010101010101010101010101010101010101010101,
    0b1111111111111111111111111111111111111111111111111111111111111111};

FreeDistLat::FreeDistLat(const uint64_t n) : mNumberOfGenerators(n) {
    mNumberOfBits = static_cast<uint64_t>(std::pow(2, n));

    uint64_t x = 0;

    unsigned i = 0;

    mElements.push_back(x);

    while (i < mNumberOfBits) {
        // clear last i+1 bits
        x = (x >> (i + 1)) << (i + 1);

        x |= generators[i];

        x |= ((x & 0xFFFFFFFF00000000) >> 32);
        x |= ((x & 0xFFFF0000FFFF0000) >> 16);
        x |= ((x & 0xFF00FF00FF00FF00) >> 8);
        x |= ((x & 0xF0F0F0F0F0F0F0F0) >> 4);

        mElements.push_back(x);

        i = __builtin_ffsll(~x) - 1;
    }
}

std::vector<uint64_t> FreeDistLat::getElements() const { return mElements; }

void FreeDistLat::printElements() const {
    for (unsigned int i = 0; i < mElements.size(); i++)
        std::cout << mElements[i] << std::endl;

    std::cout << std::endl;
}

void FreeDistLat::printElementsBinary() const {
    switch (mNumberOfBits) {
        case 2: {
            for (unsigned int i = 0; i < mElements.size(); i++) {
                std::cout << std::bitset<2>(mElements[i]) << " " << mElements[i] << std::endl;
            }
            break;
        }
        case 4: {
            for (unsigned int i = 0; i < mElements.size(); i++) {
                std::cout << std::bitset<4>(mElements[i]) << " " << mElements[i] << std::endl;
            }
            break;
        }
        case 8: {
            for (unsigned int i = 0; i < mElements.size(); i++) {
                std::cout << std::bitset<8>(mElements[i]) << " " << mElements[i] << std::endl;
            }
            break;
        }
        case 16: {
            for (unsigned int i = 0; i < mElements.size(); i++) {
                std::cout << std::bitset<16>(mElements[i]) << " " << mElements[i] << std::endl;
            }
            break;
        }
        case 32: {
            for (unsigned int i = 0; i < mElements.size(); i++) {
                std::cout << std::bitset<32>(mElements[i]) << " " << mElements[i] << std::endl;
            }
            break;
        }
        case 64: {
            for (unsigned int i = 0; i < mElements.size(); i++) {
                std::cout << std::bitset<64>(mElements[i]) << " " << mElements[i] << std::endl;
            }
            break;
        }
    }

    std::cout << std::endl;
}

void FreeDistLat::printNumberOfElements() const { std::cout << mElements.size() << std::endl; }

uint64_t FreeDistLat::getNumberOfElements() const {
    return static_cast<uint64_t>(mElements.size());
}

uint64_t FreeDistLat::getNumberOfGenerators() const { return mNumberOfGenerators; }

uint64_t FreeDistLat::getNumberOfBits() const { return mNumberOfBits; }

void FreeDistLat::printElementsDetailed() const {
    std::map<uint16_t, std::vector<uint64_t>> pcMap;
    for (auto x : mElements)
        pcMap[__builtin_popcountll(x)].push_back(x);

    for (auto& [key, vec] : pcMap) {
        std::cout << "***************************************" << std::endl;
        std::cout << key << ": " << std::endl;
        for (auto x : vec)
            std::cout << x << std::endl;
    }
    std::cout << std::endl;

    for (unsigned int i = 0; i < std::pow(2, mNumberOfGenerators) - 1; ++i)
        for (auto x : pcMap[i]) {
            std::cout << x << ": ";
            for (auto y : pcMap[i + 1])
                if (x == (x & y))
                    std::cout << y << " ";

            std::cout << std::endl;
        }
}
